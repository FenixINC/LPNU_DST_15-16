package cons;

import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;

import lpi.server.rmi.IServer;

public class ConsoleInterp {
	
	static String[] partsout(String[] array, int index)
	{
		 String [] result = new String[array.length-index];
		 for (int i=index; i<(array.length); i++)
		  {
			 result[i-index] = array[i];
			 
	  	  }
		return result;
	}
	
/*public static byte[] serialize(Object obj) throws IOException {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    ObjectOutputStream os = new ObjectOutputStream(out);
    os.writeObject(obj);
    return out.toByteArray();
}
public static Object deserialize(byte[] data) throws IOException, ClassNotFoundException {
    ByteArrayInputStream in = new ByteArrayInputStream(data);
    ObjectInputStream is = new ObjectInputStream(in);
    return is.readObject();
}*/


	/*public static void ping(IServer proxy) throws IOException 
	{
		try {
			  
			  proxy.ping();
			  
			} catch(RemoteException ex){
			   // handle communication exception
			}

	}*/
	/*public static void echo(IServer proxy, String message) throws IOException 
	{
		try {
			  
			  proxy.echo(message);
			  
			} catch(RemoteException ex){
			   // handle communication exception
			}
	}*/
private static  boolean login(IServer proxy, String name, String password) throws IOException, ClassNotFoundException 
	{
	try {
		  
		  sessionID=proxy.login(name,password);
		  
		} catch(RemoteException ex){
		   // handle communication exception
		}
		return(true); 
	}
	public void list(Socket socket) throws IOException, ClassNotFoundException 
	{
		DataInputStream dis = new DataInputStream(socket.getInputStream());
		DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
		dos.writeInt(1);
		dos.writeByte(10);
		byte[] nbm = new byte[dis.readInt()]; 
		dis.readFully(nbm);
		if(nbm.length > 1) {
			 String[] obj = (String[])deserialize(nbm); 
			 System.out.println("List of active users:"+Arrays.toString(obj));
			 }
		else 
			System.out.println("Error "+(nbm.length == 1 ? nbm[0] : Arrays.toString(nbm)));
	}
	static void msg(Socket socket, String user, String message) throws IOException, ClassNotFoundException 
	{
		DataInputStream dis = new DataInputStream(socket.getInputStream());
		DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
		byte[] bytes = serialize(new String[]{user, message});
		dos.writeInt(bytes.length+1);
		dos.writeByte(15);
		dos.write(bytes);
		byte[] nbm = new byte[dis.readInt()]; 
		dis.readFully(nbm);
		 if(nbm.length == 1 && (nbm[0]==16)) {
			 System.out.println("message sent");
			 }
		else 
			System.out.println("Error "+(nbm.length == 1 ? nbm[0] : Arrays.toString(nbm)));
	}
	static void file(Socket socket, String user, String file) throws IOException, ClassNotFoundException 
	{
		DataInputStream dis = new DataInputStream(socket.getInputStream());
		DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
		Path filePath = Paths.get(file); 
		byte[] content = Files.readAllBytes(filePath);
		Path filename = filePath.getFileName();
		byte[] bytes = serialize(new Object[]{user, filename.toString(), content});
		dos.writeInt(bytes.length+1);
		dos.writeByte(20);
		dos.write(bytes);
		byte[] nbm = new byte[dis.readInt()]; 
		dis.readFully(nbm);
		 if(nbm.length == 1 && (nbm[0]==21)) {
			 System.out.println("file sent");
			 }
		else 
			System.out.println("Error "+(nbm.length == 1 ? nbm[0] : Arrays.toString(nbm)));
	}
	static void receiveMsg(Socket socketnewMessage) throws IOException, ClassNotFoundException 
	{
		DataInputStream dis = new DataInputStream(socketnewMessage.getInputStream());
		DataOutputStream dos = new DataOutputStream(socketnewMessage.getOutputStream());
		dos.writeInt(1);
		dos.writeByte(25);
		byte[] nbm = new byte[dis.readInt()]; 
		dis.readFully(nbm);
		if(nbm.length > 1 && nbm[0] != 26) {
			 String[] obj = (String[])deserialize(nbm); 
			 System.out.println("Incoming Message:"+Arrays.toString(obj));
			 }
		else if(nbm[0] != 26)
			System.out.println("Error "+(nbm.length == 1 ? nbm[0] : Arrays.toString(nbm)));
	}
	static void receiveFile(Socket socketnewMessage) throws IOException, ClassNotFoundException 
	{
		DataInputStream dis = new DataInputStream(socketnewMessage.getInputStream());
		DataOutputStream dos = new DataOutputStream(socketnewMessage.getOutputStream());
		dos.writeInt(1);
		dos.writeByte(30);
		byte[] nbm = new byte[dis.readInt()]; 
		dis.readFully(nbm);
		if(nbm.length > 1 && nbm[0] != 31) {
			Object[] obj = (Object[]) deserialize(nbm);
			Path path = Paths.get("D:\\Desktop",(String)obj[1]);
			byte[] filecontent=((byte[])obj[2]);
			Path content = Files.write(path, filecontent, StandardOpenOption.CREATE);
			 System.out.println("Incoming File:"+Arrays.toString(obj));
			 }
		else if(nbm[0] != 31)
			System.out.println("Error "+(nbm.length == 1 ? nbm[0] : Arrays.toString(nbm)));
	}*/
	public static int SessionID;
	/*private static class MyTimerTask extends TimerTask
	{
	  public void run(){
	  try {
		 receiveMsg(socketnewMessage);
		 receiveFile(socketnewMessage);
	} catch (ClassNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	}
	}*/
	@SuppressWarnings("null")
	public static void main(String[] args) throws ClassNotFoundException, UnknownHostException, IOException, NotBoundException {
		try{
			Registry registry = LocateRegistry.getRegistry("lv.rst.uk.to", 152);
			IServer proxy = (IServer)registry.lookup(IServer.RMI_SERVER_NAME);
			   /*Socket socket = new Socket("lv.rst.uk.to", 151);
			   System.out.printf("Socket connection established%n");
			   socketnewMessage = new Socket("lv.rst.uk.to", 151);   
					  System.out.printf("Socket connection established%n");
					  PrintWriter out = new PrintWriter(socket.getOutputStream(), 
				                 true);
					   BufferedReader in = new BufferedReader(new InputStreamReader(
				                socket.getInputStream()));   
					  PrintWriter outnewMessage = new PrintWriter(socketnewMessage.getOutputStream(),true);
					     BufferedReader innewMessage = new BufferedReader(new InputStreamReader(
					  socketnewMessage.getInputStream()));*/
			  	String[] parts;
				InputStreamReader isr = new InputStreamReader ( System.in );
		BufferedReader br = new BufferedReader ( isr );
				String s = null;
				Timer timeToReceiveMsg = new Timer();
				System.out.printf("Enter String%n");
				boolean isClosed = false;
				boolean isTimerStarted = false;
		   while ( !isClosed ) {
			 
			   s = br.readLine ();
			   parts = s.split(" ");
			   switch (parts[0]) {
	            case "ping": try {
	  			   			  proxy.ping();
	  			   			} catch(RemoteException ex){
	  			   // handle communication exception
	  			}  
	            	       	break;
	            case "echo": try {
	  			  
	  			  proxy.echo(String.join(" ", partsout(parts,1)));
	  			  
	  			} catch(RemoteException ex){
	  			   // handle communication exception
	  			}
	            	        break;
	           case "login": if (login(proxy,parts[1],parts[2])&& !isTimerStarted);
	            isTimerStarted = true;
	            timeToReceiveMsg.schedule(new MyTimerTask(), 0, 1000);         
	            break;
	            case "list":  list(socket);
	                     break;
	            case "msg":  msg(socket,parts[1], String.join(" ", partsout(parts,2)));
	            	      break;
	            case "file": file(socket,parts[1],parts[2]); 
	            	    break;*/
	            /*case "exit":  
	            	try {
	      			  
	      			  proxy.exit(sessionID);
	      			  
	      			} catch(RemoteException ex){
	      			   // handle communication exception
	      			}
	                     break;*/
	            default: System.out.println("Invalid command");
	                     break;
			   }
			  }
		
		} 
		catch (UnknownHostException e) {
		     System.out.println("Unknown host: 0.0.0.0");
		     System.exit(1);
		   } catch  (IOException e) {
			   e.printStackTrace();
		   }
		
	}

}
